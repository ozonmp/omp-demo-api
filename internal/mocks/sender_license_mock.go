// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ozonmp/omp-demo-api/internal/app/sender (interfaces: LicenseEventSender)

// Package mocks is a generated GoMock package.
package mocks

import (
	"github.com/ozonmp/lic-license-api/internal/model/license"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLicenseEventSender is a mock of LicenseEventSender interface.
type MockLicenseEventSender struct {
	ctrl     *gomock.Controller
	recorder *MockLicenseEventSenderMockRecorder
}

// MockLicenseEventSenderMockRecorder is the mock recorder for MockLicenseEventSender.
type MockLicenseEventSenderMockRecorder struct {
	mock *MockLicenseEventSender
}

// NewMockLicenseEventSender creates a new mock instance.
func NewMockLicenseEventSender(ctrl *gomock.Controller) *MockLicenseEventSender {
	mock := &MockLicenseEventSender{ctrl: ctrl}
	mock.recorder = &MockLicenseEventSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLicenseEventSender) EXPECT() *MockLicenseEventSenderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockLicenseEventSender) Send(arg0 *license.LicenseEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockLicenseEventSenderMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockLicenseEventSender)(nil).Send), arg0)
}
