// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ozonmp/omp-demo-api/internal/app/repo (interfaces: EventRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	"github.com/ozonmp/lic-license-api/internal/model/license"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLicenseEventRepo is a mock of EventRepo interface.
type MockLicenseEventRepo struct {
	ctrl     *gomock.Controller
	recorder *MockLicenseEventRepoMockRecorder
}

// MockLicenseEventRepoMockRecorder is the mock recorder for MockLicenseEventRepo.
type MockLicenseEventRepoMockRecorder struct {
	mock *MockLicenseEventRepo
}

// NewMockLicenseEventRepo creates a new mock instance.
func NewMockLicenseEventRepo(ctrl *gomock.Controller) *MockLicenseEventRepo {
	mock := &MockLicenseEventRepo{ctrl: ctrl}
	mock.recorder = &MockLicenseEventRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLicenseEventRepo) EXPECT() *MockLicenseEventRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockLicenseEventRepo) Add(arg0 []license.LicenseEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockLicenseEventRepoMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockLicenseEventRepo)(nil).Add), arg0)
}

// Lock mocks base method.
func (m *MockLicenseEventRepo) Lock(arg0 uint64) ([]license.LicenseEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", arg0)
	ret0, _ := ret[0].([]license.LicenseEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lock indicates an expected call of Lock.
func (mr *MockLicenseEventRepoMockRecorder) Lock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockLicenseEventRepo)(nil).Lock), arg0)
}

// Remove mocks base method.
func (m *MockLicenseEventRepo) Remove(arg0 []uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockLicenseEventRepoMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockLicenseEventRepo)(nil).Remove), arg0)
}

// Unlock mocks base method.
func (m *MockLicenseEventRepo) Unlock(arg0 []uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlock indicates an expected call of Unlock.
func (mr *MockLicenseEventRepoMockRecorder) Unlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockLicenseEventRepo)(nil).Unlock), arg0)
}
